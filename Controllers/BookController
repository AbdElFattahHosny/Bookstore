using Bookstore.Models;
using Bookstore.Models.Repositories;
using Bookstore.ViewModels;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Bookstore.Controllers
{

    public class BookController : Controller
    {
        private readonly IBookstoreRepository<Book> bookRepository;
        private readonly IBookstoreRepository<Author> authorRepository;
        private readonly IHostingEnvironment hosting;

        public BookController(IBookstoreRepository<Book> bookRepository, IBookstoreRepository<Author> authorRepository , IHostingEnvironment hosting) 
        {
            this.bookRepository = bookRepository;
            this.authorRepository = authorRepository;
            this.hosting = hosting;
        }
        // GET: BookController
        public ActionResult Index()
        {
            var books = bookRepository.List();
            return View(books);
        }

        // GET: BookController/Details/5
        public ActionResult Details(int id)
        {
            var book = bookRepository.find(id);
            return View(book);
        }

        // GET: BookController/Create
        public ActionResult Create()
        {
            var model = new BookAuthorViewModel
            {
                Authors = FillTheList()
            };
            return View(model);
        }

        // POST: BookController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(BookAuthorViewModel model)
        {
            if (ModelState.IsValid)
            {
                string fileName = UploadFile(model.File) ?? String.Empty;
                try
                {
                    if (model.AuthorId == -1)
                    {
                        ViewBag.Message = " PLease choose one author";

                        return View(getallauthors());

                    }

                    Book book = new Book
                    {
                        Id = model.BookId,
                        Title = model.Title,
                        Description = model.Description,
                        Author = authorRepository.find(model.AuthorId),
                        ImageUrl=fileName
                    };
                    bookRepository.Add(book);
                    return RedirectToAction(nameof(Index));
                }
                catch
                {
                    return View();
                }
                
            }
            ModelState.AddModelError("", "Error Message");
            return View(getallauthors());

            }

        // GET: BookController/Edit/5
        public ActionResult Edit(int id)
        {
            var book = bookRepository.find(id);
            var authorid = book.Author == null ? book.Author.Id = 0 : book.Author.Id;
            var viewModel = new BookAuthorViewModel
            {
                BookId = book.Id,
                Title = book.Title,
                Description = book.Description,
                AuthorId = authorid,
                Authors = authorRepository.List().ToList(),
                ImageUrl=book.ImageUrl
            };
            return View(viewModel);
        }

        // POST: BookController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(BookAuthorViewModel viewModel)
        {
            try
            {
                string fileName = UploadFile(viewModel.File, viewModel.ImageUrl);
                var author = authorRepository.find(viewModel.AuthorId);
                var book = new Book
                {
                    Id = viewModel.BookId,
                    Title = viewModel.Title,
                    Description = viewModel.Description,
                    Author = author,
                    ImageUrl = fileName

                };

                bookRepository.Update(viewModel.BookId, book);

                return RedirectToAction(nameof(Index));
            }
            catch(Exception ex)
            {
                return View();
            }
        }

        // GET: BookController/Delete/5
        public ActionResult Delete(int id)
        {
            var book = bookRepository.find(id);
            return View(book);
        }

        // POST: BookController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ConDelete(int id)
        {
            try
            {
                bookRepository.Delete(id);
                return RedirectToAction(nameof(Index));
            }
            catch
            {
                return View();
            }
        }
        List<Author> FillTheList()
        {
            var authors = authorRepository.List().ToList();
            authors.Insert(0, new Author { Id = -1, FullName = "--Choose on Author" });
            return authors;
        }

        BookAuthorViewModel getallauthors()
        {
            var vmodel = new BookAuthorViewModel
            {
                Authors = FillTheList()
            };
            return vmodel;

        }

        string UploadFile(IFormFile file)
        {
            if (file != null)
            {
                string upload = Path.Combine(hosting.WebRootPath, "Uploads");
                
                string FullPath = Path.Combine(upload, file.FileName);
                file.CopyTo(new FileStream(FullPath, FileMode.Create));
                return file.FileName;
            }
            return null;
        }


        string UploadFile(IFormFile file ,string imgUrl)
        {
            if (file != null)
            {
                string upload = Path.Combine(hosting.WebRootPath, "Uploads");

                //Random rnd = new Random();
                //string randomNum = rnd.Next().ToString();

                string newpath = Path.Combine(upload, /*randomNum,*/ file.FileName);
                //File.Exists()
               
                string FullOldPath = Path.Combine(upload,imgUrl);

                if (FullOldPath != newpath)
                {
                    //System.IO.File.Delete(FullOldPath);
                    file.CopyTo(new FileStream(newpath, FileMode.Create));
                }
                     return file.FileName;            
            }
            return imgUrl;

        }

        public ActionResult Search(string term)
        {
            var result = bookRepository.Search(term);
            return View("Index", result);
        }
    }
}
